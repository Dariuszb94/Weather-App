{"version":3,"sources":["components/Form.js","components/Header.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","className","type","value","placeholder","onChange","change","Header","Result","weather","date","sunrise","sunset","temp","pressure","wind","err","city","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","charAt","toUpperCase","slice","class","APIKey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","prevState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAeeA,EAbF,SAAAC,GACT,OACI,0BAAMC,SAAUD,EAAME,OAAQC,UAAU,QACpC,2BACCC,KAAK,OACJC,MAAOL,EAAMK,MACbC,YAAY,eACZC,SAAUP,EAAMQ,SAElB,qDCJGC,EALA,SAAAT,GACX,OACE,yBAAKG,UAAU,UAAS,oDC6BfO,EA/BD,SAAAV,GAAU,IAAD,EACgCA,EAAMW,QAAvDC,EADiB,EACjBA,KAAKC,EADY,EACZA,QAASC,EADG,EACHA,OAAQC,EADL,EACKA,KAAMC,EADX,EACWA,SAAUC,EADrB,EACqBA,KAAMC,EAD3B,EAC2BA,IAC9CC,EAAMnB,EAAMW,QAAZQ,KAEAC,EAAQ,KAER,IAAIF,GAAOC,EAAK,CACZ,IAAME,EAAa,IAAIC,KAAa,IAART,GAAcU,qBACpCC,EAAY,IAAIF,KAAY,IAAPR,GAAaS,qBACxCJ,EAAKA,EAAKM,OAAO,GAAGC,cAAgBP,EAAKQ,MAAM,GAEvDP,EACA,yBAAKQ,MAAM,WACR,uDAA4B,4BAAKT,IACpC,wDAA8BP,GAC9B,qDAA2BG,EAA3B,UACA,wDAAyBC,EAAzB,QACA,mEAA4BK,GAC5B,mEAA4BG,GAC5B,2DAA4BP,EAA5B,SAMI,OACJ,yBAAKd,UAAU,UACZe,EAAM,kBAAoBC,EAAQC,ICtB/BS,G,MAAO,oCA0EEC,E,2MAvEbC,MAAM,CACJ1B,MAAO,GACPO,KAAK,GACLO,KAAK,GACLN,QAAQ,GACRC,OAAO,GACPC,KAAK,GACLC,SAAS,GACTC,KAAK,GACLC,KAAI,G,EAENc,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZ7B,MAAO4B,EAAEE,OAAO9B,S,EAIpB+B,iBAAmB,SAAAH,GACjBA,EAAEI,iBAEL,IAAMC,EAAK,qDAAuD,EAAKP,MAAM1B,MAAQ,UAAYwB,EAAQ,gBAE1GU,MAAMD,GACLE,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAK,IAAIxB,MAAOyB,iBACtB,EAAKb,UAAS,SAAAH,GAAK,MAAK,CACtBb,KAAI,EACJN,KAAKkC,EACL3B,KAAKY,EAAM1B,MACXQ,QAAQgC,EAAKG,IAAInC,QACjBC,OAAO+B,EAAKG,IAAIlC,OAChBC,KAAK8B,EAAKI,KAAKlC,KACfC,SAAS6B,EAAKI,KAAKjC,SACnBC,KAAK4B,EAAK5B,KAAKiC,aAIlBC,OAAM,SAAAjC,GAELkC,QAAQC,IAAInC,GACZ,EAAKgB,UAAS,SAAAoB,GAAS,MAAI,CAEzBpC,KAAI,EACJC,KAAKmC,EAAUjD,c,wEAKjB,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACnB,kBAAC,EAAD,CACAE,MAAOkD,KAAKxB,MAAM1B,MACjBG,OAAQ+C,KAAKvB,kBACb9B,OAAQqD,KAAKnB,mBAEd,kBAAC,EAAD,CAAQzB,QAAS4C,KAAKxB,c,GAjENyB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.ea6fd22a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form onSubmit={props.submit} className=\"form\">\r\n            <input\r\n             type=\"text\"\r\n              value={props.value}\r\n              placeholder=\"Wpisz miasto\"\r\n              onChange={props.change}\r\n              />\r\n            <button>Wyszukaj miasta</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form","import React from 'react';\r\n\r\nconst Header = props => {\r\n    return (\r\n      <div className=\"header\"><h1>Aplikacja pogodowa</h1></div>\r\n    )\r\n}\r\nexport default Header","import React from 'react';\r\n\r\nconst Result= props => {\r\nconst{date,sunrise, sunset, temp, pressure, wind, err}=props.weather;\r\nlet{city}=props.weather;\r\n\r\nlet content=null;\r\n\r\n    if(!err && city){\r\n        const sunriseTime =new Date(sunrise*1000).toLocaleTimeString();\r\n        const sunsetTime =new Date(sunset*1000).toLocaleTimeString();\r\n        city=city.charAt(0).toUpperCase() + city.slice(1);\r\n\r\ncontent=(\r\n<div class=\"results\">\r\n   <h4>Wyniki wyszukiwania dla <em>{city}</em></h4> \r\n<h5>Dane dla dnia i godziny: {date}</h5>\r\n<h5>Aktualna temperatura: {temp} &#176;C</h5>\r\n<h5>Aktualne ciśnienie: {pressure} hPa</h5>\r\n<h5>Wschód słońca dzisiaj: {sunriseTime}</h5>\r\n<h5>Zachód słońca dzisiaj: {sunsetTime}</h5>\r\n<h5> Aktualna siła wiatru: {wind} m/s</h5>\r\n\r\n   \r\n    </div>\r\n)\r\n    }\r\n    return(\r\n<div className=\"result\">\r\n  {err ? 'Nie ma w bazie ' + city  : content }  \r\n</div>\r\n    );\r\n}\r\nexport default Result;","import React, {Component} from 'react';\nimport Form from './Form';\nimport Header from './Header';\nimport Result from './Result';\nimport './App.css';\n\n//Klucz do API\nconst APIKey='6dd59afe128b829271e3c378ec2ba2cc';\n\nclass App extends Component{\n  state={\n    value: '',\n    date:'',\n    city:'',\n    sunrise:'',\n    sunset:'',\n    temp:'',\n    pressure:'',\n    wind:'',\n    err:false,\n  }\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleCitySubmit = e => {\n    e.preventDefault()\n\n const API ='https://api.openweathermap.org/data/2.5/weather?q=' + this.state.value + '&appid=' + APIKey +'&units=metric';\n  \nfetch(API)\n.then(response => {\n  if(response.ok){\n    return response\n  }\n  throw Error(\"Nie udało się\")\n})\n.then(response => response.json())\n.then(data =>{\n  const time=new Date().toLocaleString()\n  this.setState(state => ({\n    err:false,\n    date:time,\n    city:state.value,\n    sunrise:data.sys.sunrise,\n    sunset:data.sys.sunset,\n    temp:data.main.temp,\n    pressure:data.main.pressure,\n    wind:data.wind.speed,\n \n  }))\n})\n.catch(err=>{\n  \n  console.log(err);\n  this.setState(prevState =>({\n    \n    err:true,\n    city:prevState.value\n  }))\n})\n}\n  render(){\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"main\">\n  <Form \n  value={this.state.value}\n   change={this.handleInputChange} \n   submit={this.handleCitySubmit} \n   />\n  <Result weather={this.state}/>\n    </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}